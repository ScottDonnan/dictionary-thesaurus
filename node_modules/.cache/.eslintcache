[{"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/index.js":"1","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/App.js":"2","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/Search.jsx":"3","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/WordCard.jsx":"4","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/WordOfTheDay.jsx":"5","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/FavoriteList.jsx":"6","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/NavBar.jsx":"7","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/NewUserForm.jsx":"8","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/ThesaurusCard.jsx":"9","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/styled/card.js":"10"},{"size":473,"mtime":1633700850710,"results":"11","hashOfConfig":"12"},{"size":5387,"mtime":1641481007494,"results":"13","hashOfConfig":"12"},{"size":2905,"mtime":1641481641574,"results":"14","hashOfConfig":"12"},{"size":3327,"mtime":1641398812962,"results":"15","hashOfConfig":"12"},{"size":2506,"mtime":1633655190230,"results":"16","hashOfConfig":"12"},{"size":617,"mtime":1641397453080,"results":"17","hashOfConfig":"12"},{"size":3042,"mtime":1641480768202,"results":"18","hashOfConfig":"12"},{"size":2992,"mtime":1641481077049,"results":"19","hashOfConfig":"12"},{"size":530,"mtime":1641332061055,"results":"20","hashOfConfig":"12"},{"size":586,"mtime":1633701528695,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"r42n52",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/index.js",[],["47","48"],"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/App.js",["49","50","51"],"import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Search from './Components/Search';\nimport WordOfTheDay from './Components/WordOfTheDay';\nimport FavoriteList from './Components/FavoriteList';\nimport NavBar from './Components/NavBar';\nimport NewUserForm from './Components/NewUserForm';\nimport WordCard from './Components/WordCard';\nimport ThesaurusCard from './Components/ThesaurusCard';\nimport { Route, Switch } from 'react-router-dom'\n\n\nfunction App() {\n  const [searchWord, setSearchWord] = useState('')\n  const [loggedInUser, setLoggedInUser] = useState(null)\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [favList, setFavList] = useState([])\n  const [thesaurusSearchWord, setThesaurusSearchWord] = useState(\"\")\n  const [isLiked, setIsLiked] = useState(true)\n  const [favoriteWords, setFavoriteWords] = useState([])\n  \n  useEffect(()=>{\n    fetch('me').then(resp => {\n      if (resp.ok) {\n        resp.json()\n        .then(user => {\n          setLoggedInUser(user)\n          if(user) {\n            getFavorites(user)\n          } else {\n            setFavoriteWords([])\n          }\n        })\n      } else {\n        console.log(resp.json())\n      }\n    })\n  },[]) \n\n  function getFavorites(user) {\n    fetch(`users/favorite_words/${user.id}`)\n        .then(resp => resp.json())\n        .then(words => setFavoriteWords(words))\n  }\n  \n  function getWordDefinition(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${searchValue}?key=818a2b96-1647-4667-8769-8f3de5ad1509`)\n    .then(r => {\n            if (r.ok) {\n              r.json().then(data => {\n                  if (data[0].meta) {\n                    setSearchWord(data)\n                  } else {\n                    alert(\"word not found\")\n                  }\n              })\n            }\n    })}\n\n  function getWordSynonym(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/thesaurus/json/${searchValue}?key=bf67571a-955e-4874-aa11-d4d40d976166`)\n    .then(r => r.json())\n    .then(data => setThesaurusSearchWord(data))\n  }\n\n  function userLogin(username, password, e) {\n    e.preventDefault()\n    const loginObj = {\n      username: username,\n      password: password\n    }\n\n    fetch(`login`, {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(loginObj)\n    })\n    .then(resp=>{\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user)\n          getFavorites(user)\n        })\n      } else {\n        resp.json().then(data => console.log(data))\n      }\n    })}\n  \n  const addWordToFavorites = (wordObj, userObj) => {\n    const userFavObj ={\n      user_id: userObj.id,\n      name: wordObj.name\n        }\n      fetch('favorites', {\n        method: 'POST',\n        headers: {\n          'Content-Type':'application/json'\n        },\n        body: JSON.stringify(userFavObj)\n      })\n      .then(res => {\n        if (res.ok) {\n          res.json().then(data => {\n            getFavorites(loggedInUser)\n            console.log(data)\n          })\n        }\n      })\n      \n  }\n\n  // const grabFavorites = () => {\n  //   setFavList(value => value = [])\n  //   fetch(`http://localhost:3001/user/${loggedInUser.id}/favorites?_expand=words`)\n  //   .then(res=>res.json())\n  //   .then(data => anotherFunction(data))\n  // }\n      \n\n  // const anotherFunction = (data) => {\n  //     data.forEach(objs=>{ \n  //     fetch(`http://localhost:3001/words/${objs.wordId}`)\n  //     .then(res=>res.json())\n  //     .then(data=> {\n  //       const favObj = {...data, favoriteID: objs.id}\n  //       setFavList(value=>[...value, favObj])})\n  //     })\n  //   }\n      \n\n  function handleDeleteFavorite(favorite) {\n    console.log(favorite)\n    fetch(`favorites/${favorite.id}`, {\n      method: 'DELETE'\n    })\n    .then(resp => {\n      if(resp.ok) {\n        getFavorites(loggedInUser)\n      } else {\n        resp.json().then(data => alert(data.errors))\n      }\n    })\n  }\n  \n  return (\n    <div>\n      <Switch>\n          <Route path=\"/newuser\">\n            <NewUserForm setLoggedInUser={setLoggedInUser} setFavoriteWords={setFavoriteWords} getFavorites={getFavorites}/>\n          </Route>\n          <Route path=\"/randomword\">\n            <WordOfTheDay />\n          </Route>\n          <Route path=\"/\">\n            <NavBar userLogin={userLogin} setLoggedInUser={setLoggedInUser} loggedInUser={loggedInUser} setIsLoggedIn={setIsLoggedIn} isLoggedIn={isLoggedIn} />\n            <Search getWordDefinition={getWordDefinition} getWordSynonym={getWordSynonym} setSearchWord={setSearchWord} setThesaurusSearchWord={setThesaurusSearchWord}/> \n            {searchWord? <WordCard handleDeleteFavorite={handleDeleteFavorite} favoriteWords={favoriteWords} isLiked={isLiked} addWordToFavorites={addWordToFavorites} isLiked={isLiked} setSearchWord={setSearchWord} searchWord={searchWord[0]} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/> : null}\n            {thesaurusSearchWord? <ThesaurusCard setThesaurusSearchWord={setThesaurusSearchWord} thesaurusSearchWord={thesaurusSearchWord[0]} /> : null}\n            {loggedInUser ? <FavoriteList favoriteWords={favoriteWords} handleDeleteFavorite={handleDeleteFavorite} favList={favList} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/> : null }\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/Search.jsx",[],"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/WordCard.jsx",["52","53","54"],"import { useState } from \"react\"\nimport Card from \"../styled/card\"\nimport styled from \"styled-components\"\n\nfunction WordCard({handleDeleteFavorite, searchWord, loggedInUser, addWordToFavorites, favoriteWords, setSearchWord}) {\n\n    const subdirectory = searchWord.hwi?.prs[0].sound.audio[0]\n    const soundFile = searchWord.hwi?.prs[0].sound.audio \n    const audioElement = new Audio(`https://media.merriam-webster.com/audio/prons/en/us/mp3/${subdirectory}/${soundFile}.mp3`)\n\n    let isImage = true\n    let image\n\n    const searchWordOrg = searchWord.hwi.hw\n    const searchWordName = searchWordOrg.replace('*', '')\n\n    if(searchWord.art?.artid) {\n    isImage = true\n    const imageDirectory = searchWord.art.artid \n    image = `https://www.merriam-webster.com/assets/mw/static/art/dict/${imageDirectory}.gif`\n    } else {\n    isImage = false\n    }\n    \n    const wordToBeFavorite = { name: searchWord.meta.id, pronunciation: searchWord.hwi.prs[0].mw }\n\n    const playAudio = () => { audioElement.play() }\n\n   \n    const favNameList = favoriteWords.map(fav => fav.name)\n    const favoriteButton = <div>{favNameList?.includes(searchWord.meta.id) ? <LikeButton onClick={() => findFavoriteToDelete(wordToBeFavorite.name)}>'❤️'</LikeButton> : \n        <LikeButton onClick={() => addWordToFavorites(wordToBeFavorite, loggedInUser)}>'🤍'</LikeButton>}</div>\n   \n    function findFavoriteToDelete(favoriteToRemove) {\n       const favorite = favoriteWords.find(fav => fav.name === favoriteToRemove)\n       handleDeleteFavorite(favorite)\n    }\n  \n   let count = 1\n    return(\n        <Card>\n            <h2>{searchWordName} \n                {loggedInUser ? favoriteButton : null}\n            </h2>\n            <h3>{searchWord.hwi.prs[0].mw}</h3>\n            <PlayButton onClick={playAudio}>Say Word</PlayButton>\n            {searchWord.shortdef.map((word, index) => {\n                return <p key={index}>Definition {count}: {word}</p>\n                console.log('counter', count)\n                count = count + 1\n                })}\n            {isImage ? <img src={image}/> : null}\n            <button onClick={() => setSearchWord('')}>minimize</button>            \n        </Card>\n    )\n}\n\nexport default WordCard\n\nconst PlayButton = styled.button`\n    background-image: linear-gradient(to right, #2BC0E4 0%, #EAECC6  51%, #2BC0E4  100%)}  \n    padding: 15px 45px;\n    text-align: center;\n    text-transform: uppercase;\n    font-family: Helvetica; sans-serif;\n    transition: 0.5s;\n    background-size: 200% auto;\n    color: black;            \n    box-shadow: 0 0 20px #eee;\n    border-radius: 10px;\n    display: center;\n          }\n\n          &:hover {\n            background-position: right center; \n            color: #fff;\n            text-decoration: none;       \n`\n\nconst LikeButton = styled.button`\n    background-image: linear-gradient(to right, #2BC0E4 0%, #EAECC6  51%, #2BC0E4  100%)}  \n    padding: 15px;\n    text-align: center;\n    text-transform: uppercase;\n    font-family: Helvetica; sans-serif;\n    transition: 0.5s;\n    background-size: 200% auto;\n    color: black;            \n    box-shadow: 0 0 20px #eee;\n    border-radius: 10px;\n    display: center;\n          }\n\n          &:hover {\n            background-position: right center; \n            color: #fff;\n            text-decoration: none;       \n`","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/WordOfTheDay.jsx",["55","56"],"\nimport Card from \"../styled/card\"\nimport {useEffect, useState} from 'react'\nimport { generateSlug } from \"random-word-slugs\"\nimport styled from \"styled-components\"\n\nfunction WordOfTheDay() {\n    const [randomWord, setRandomWord] = useState(\n        [\n          { art: { \n            artid: ''},\n            hwi: \n            {hw: '', \n              prs: [ {mw: '',\n                        sound: {\n                          audio: \"\"\n                        }} ],},\n            shortdef: [] },\n        ])\n    const slug = generateSlug(1)\n    \n    useEffect(() => {\n        fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${slug}?key=818a2b96-1647-4667-8769-8f3de5ad1509`)\n        .then(r => r.json())\n        .then(data => {\n        setRandomWord(data)\n        })\n    }, [])\n    \n    const subdirectory = randomWord[0].hwi.prs[0].sound.audio[0]\n    const soundFile = randomWord[0].hwi.prs[0].sound.audio \n    const audioElement = new Audio(`https://media.merriam-webster.com/audio/prons/en/us/mp3/${subdirectory}/${soundFile}.mp3`)\n\n    let isImage = true\n    let image\n\n    const randomWordOrg = randomWord[0].hwi.hw\n    const randomWordName = randomWordOrg.replace('*', '')\n\n    if(randomWord[0].art?.artid) {\n     isImage = true\n     const imageDirectory = randomWord[0].art.artid \n     image = `https://www.merriam-webster.com/assets/mw/static/art/dict/${imageDirectory}.gif`\n    } else {\n        isImage = false\n    }\n\n    const playAudio = () => {\n        audioElement.play()\n    }\n    \n  \n\n     return(\n         <Card>\n             <h1>Your Random Word!</h1>\n             <h2>{randomWordName}</h2>\n             <h3>{randomWord[0].hwi.prs[0].mw}</h3>\n             <PlayButton onClick={playAudio}>Say Word</PlayButton>\n             {randomWord[0].shortdef.map((word, index) => <p key={index}>{word}</p>)}\n             {isImage ? <img src={image}/> : null}\n         </Card>\n     )\n}\n\nexport default WordOfTheDay\n\nconst PlayButton = styled.button`\n    background-image: linear-gradient(to right, #2BC0E4 0%, #EAECC6  51%, #2BC0E4  100%)}  \n    padding: 15px 45px;\n    text-align: center;\n    text-transform: uppercase;\n    font-family: Helvetica; sans-serif;\n    transition: 0.5s;\n    background-size: 200% auto;\n    color: black;            \n    box-shadow: 0 0 20px #eee;\n    border-radius: 10px;\n    display: center;\n          }\n\n          &:hover {\n            background-position: right center; \n            color: #fff;\n            text-decoration: none;\n          \n         \n`","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/FavoriteList.jsx",["57","58"],"import { useEffect, useState } from \"react\"\nimport Card from \"../styled/card\"\n\nfunction FavoriteList({handleDeleteFavorite, loggedInUser, favoriteWords}) {\n\n    let listOfFavorites =\n        favoriteWords.map(word => {\n        return <li key={word.id}>\n                    {word.name}\n                    <button onClick={() => handleDeleteFavorite(word)}>❌</button>\n                </li>\n        })\n    \n    return(\n        <Card>\n            <h2>{loggedInUser ? `${loggedInUser.username}'s Favorite Words` : 'Favorite Words'}</h2>\n            {listOfFavorites}\n        </Card>\n    )\n}\n\nexport default FavoriteList","/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/NavBar.jsx",[],"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/NewUserForm.jsx",[],"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/Components/ThesaurusCard.jsx",[],"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/styled/card.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":17,"column":19,"nodeType":"65","messageId":"66","endLine":17,"endColumn":29},{"ruleId":"63","severity":1,"message":"67","line":19,"column":19,"nodeType":"65","messageId":"66","endLine":19,"endColumn":29},{"ruleId":"68","severity":1,"message":"69","line":157,"column":168,"nodeType":"70","messageId":"71","endLine":157,"endColumn":185},{"ruleId":"63","severity":1,"message":"72","line":1,"column":10,"nodeType":"65","messageId":"66","endLine":1,"endColumn":18},{"ruleId":"73","severity":1,"message":"74","line":49,"column":17,"nodeType":"75","messageId":"76","endLine":50,"endColumn":34},{"ruleId":"77","severity":1,"message":"78","line":52,"column":24,"nodeType":"79","endLine":52,"endColumn":42},{"ruleId":"80","severity":1,"message":"81","line":28,"column":8,"nodeType":"82","endLine":28,"endColumn":10,"suggestions":"83"},{"ruleId":"77","severity":1,"message":"78","line":61,"column":25,"nodeType":"79","endLine":61,"endColumn":43},{"ruleId":"63","severity":1,"message":"84","line":1,"column":10,"nodeType":"65","messageId":"66","endLine":1,"endColumn":19},{"ruleId":"63","severity":1,"message":"72","line":1,"column":21,"nodeType":"65","messageId":"66","endLine":1,"endColumn":29},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'setFavList' is assigned a value but never used.","Identifier","unusedVar","'setIsLiked' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useState' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'slug'. Either include it or remove the dependency array.","ArrayExpression",["87"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},"Update the dependencies array to be: [slug]",{"range":"90","text":"91"},[791,793],"[slug]"]