{"ast":null,"code":"var _jsxFileName = \"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/dictionary-thesaurus/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Search from './Components/Search';\nimport WordOfTheDay from './Components/WordOfTheDay';\nimport FavoriteList from './Components/FavoriteList';\nimport NavBar from './Components/NavBar';\nimport NewUserForm from './Components/NewUserForm';\nimport WordCard from './Components/WordCard';\nimport ThesaurusCard from './Components/ThesaurusCard';\nimport { Route, Switch } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [searchWord, setSearchWord] = useState('');\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [favList, setFavList] = useState([]);\n  const [thesaurusSearchWord, setThesaurusSearchWord] = useState(\"\");\n  const [isLiked, setIsLiked] = useState(true);\n  const [favoriteWords, setFavoriteWords] = useState([]);\n  useEffect(() => {\n    fetch('https://dictionary-thesaurus-api.herokuapp.com/me').then(resp => {\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user);\n\n          if (user) {\n            getFavorites(user);\n          } else {\n            setFavoriteWords([]);\n          }\n        });\n      } else {\n        console.log(resp.json());\n      }\n    });\n  }, []);\n\n  function getFavorites(user) {\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/users/favorite_words/${user.id}`).then(resp => resp.json()).then(words => setFavoriteWords(words));\n  }\n\n  function getWordDefinition(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${searchValue}?key=818a2b96-1647-4667-8769-8f3de5ad1509`).then(r => {\n      if (r.ok) {\n        r.json().then(data => {\n          if (data[0].meta) {\n            setSearchWord(data);\n          } else {\n            alert(\"word not found\");\n          }\n        });\n      }\n    });\n  }\n\n  function getWordSynonym(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/thesaurus/json/${searchValue}?key=bf67571a-955e-4874-aa11-d4d40d976166`).then(r => r.json()).then(data => setThesaurusSearchWord(data));\n  }\n\n  function userLogin(username, password, e) {\n    e.preventDefault();\n    const loginObj = {\n      username: username,\n      password: password\n    };\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(loginObj)\n    }).then(resp => {\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user);\n          getFavorites(user);\n        });\n      } else {\n        resp.json().then(data => console.log(data));\n      }\n    });\n  }\n\n  const addWordToFavorites = (wordObj, userObj) => {\n    const userFavObj = {\n      user_id: userObj.id,\n      name: wordObj.name\n    };\n    fetch('https://dictionary-thesaurus-api.herokuapp.com/favorites', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userFavObj)\n    }).then(res => {\n      if (res.ok) {\n        res.json().then(data => {\n          getFavorites(loggedInUser);\n          console.log(data);\n        });\n      }\n    });\n  }; // const grabFavorites = () => {\n  //   setFavList(value => value = [])\n  //   fetch(`http://localhost:3001/user/${loggedInUser.id}/favorites?_expand=words`)\n  //   .then(res=>res.json())\n  //   .then(data => anotherFunction(data))\n  // }\n  // const anotherFunction = (data) => {\n  //     data.forEach(objs=>{ \n  //     fetch(`http://localhost:3001/words/${objs.wordId}`)\n  //     .then(res=>res.json())\n  //     .then(data=> {\n  //       const favObj = {...data, favoriteID: objs.id}\n  //       setFavList(value=>[...value, favObj])})\n  //     })\n  //   }\n\n\n  function handleDeleteFavorite(favorite) {\n    console.log(favorite);\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/favorites/${favorite.id}`, {\n      method: 'DELETE'\n    }).then(resp => {\n      if (resp.ok) {\n        getFavorites(loggedInUser);\n      } else {\n        resp.json().then(data => alert(data.errors));\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/newuser\",\n        children: /*#__PURE__*/_jsxDEV(NewUserForm, {\n          setLoggedInUser: setLoggedInUser,\n          setFavoriteWords: setFavoriteWords,\n          getFavorites: getFavorites\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/randomword\",\n        children: /*#__PURE__*/_jsxDEV(WordOfTheDay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          userLogin: userLogin,\n          setLoggedInUser: setLoggedInUser,\n          loggedInUser: loggedInUser,\n          setIsLoggedIn: setIsLoggedIn,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Search, {\n          getWordDefinition: getWordDefinition,\n          getWordSynonym: getWordSynonym,\n          setSearchWord: setSearchWord,\n          setThesaurusSearchWord: setThesaurusSearchWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), searchWord ? /*#__PURE__*/_jsxDEV(WordCard, {\n          handleDeleteFavorite: handleDeleteFavorite,\n          favoriteWords: favoriteWords,\n          isLiked: isLiked,\n          addWordToFavorites: addWordToFavorites,\n          isLiked: isLiked,\n          setSearchWord: setSearchWord,\n          searchWord: searchWord[0],\n          isLoggedIn: isLoggedIn,\n          loggedInUser: loggedInUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 26\n        }, this) : null, thesaurusSearchWord ? /*#__PURE__*/_jsxDEV(ThesaurusCard, {\n          setThesaurusSearchWord: setThesaurusSearchWord,\n          thesaurusSearchWord: thesaurusSearchWord[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 35\n        }, this) : null, loggedInUser ? /*#__PURE__*/_jsxDEV(FavoriteList, {\n          favoriteWords: favoriteWords,\n          handleDeleteFavorite: handleDeleteFavorite,\n          favList: favList,\n          isLoggedIn: isLoggedIn,\n          loggedInUser: loggedInUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dAGzH+BO5XYyg6FxV3jOGAMBxVo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/scottdonnan/Development/code/flatiron-projects/phase-2/dictionary-thesaurus/src/App.js"],"names":["React","useState","useEffect","Search","WordOfTheDay","FavoriteList","NavBar","NewUserForm","WordCard","ThesaurusCard","Route","Switch","App","searchWord","setSearchWord","loggedInUser","setLoggedInUser","isLoggedIn","setIsLoggedIn","favList","setFavList","thesaurusSearchWord","setThesaurusSearchWord","isLiked","setIsLiked","favoriteWords","setFavoriteWords","fetch","then","resp","ok","json","user","getFavorites","console","log","id","words","getWordDefinition","searchValue","r","data","meta","alert","getWordSynonym","userLogin","username","password","e","preventDefault","loginObj","method","headers","body","JSON","stringify","addWordToFavorites","wordObj","userObj","userFavObj","user_id","name","res","handleDeleteFavorite","favorite","errors"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Search from './Components/Search';\nimport WordOfTheDay from './Components/WordOfTheDay';\nimport FavoriteList from './Components/FavoriteList';\nimport NavBar from './Components/NavBar';\nimport NewUserForm from './Components/NewUserForm';\nimport WordCard from './Components/WordCard';\nimport ThesaurusCard from './Components/ThesaurusCard';\nimport { Route, Switch } from 'react-router-dom'\n\n\nfunction App() {\n  const [searchWord, setSearchWord] = useState('')\n  const [loggedInUser, setLoggedInUser] = useState(null)\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [favList, setFavList] = useState([])\n  const [thesaurusSearchWord, setThesaurusSearchWord] = useState(\"\")\n  const [isLiked, setIsLiked] = useState(true)\n  const [favoriteWords, setFavoriteWords] = useState([])\n  \n  useEffect(()=>{\n    fetch('https://dictionary-thesaurus-api.herokuapp.com/me').then(resp => {\n      if (resp.ok) {\n        resp.json()\n        .then(user => {\n          setLoggedInUser(user)\n          if(user) {\n            getFavorites(user)\n          } else {\n            setFavoriteWords([])\n          }\n        })\n      } else {\n        console.log(resp.json())\n      }\n    })\n  },[]) \n\n  function getFavorites(user) {\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/users/favorite_words/${user.id}`)\n        .then(resp => resp.json())\n        .then(words => setFavoriteWords(words))\n  }\n  \n  function getWordDefinition(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${searchValue}?key=818a2b96-1647-4667-8769-8f3de5ad1509`)\n    .then(r => {\n            if (r.ok) {\n              r.json().then(data => {\n                  if (data[0].meta) {\n                    setSearchWord(data)\n                  } else {\n                    alert(\"word not found\")\n                  }\n              })\n            }\n    })}\n\n  function getWordSynonym(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/thesaurus/json/${searchValue}?key=bf67571a-955e-4874-aa11-d4d40d976166`)\n    .then(r => r.json())\n    .then(data => setThesaurusSearchWord(data))\n  }\n\n  function userLogin(username, password, e) {\n    e.preventDefault()\n    const loginObj = {\n      username: username,\n      password: password\n    }\n\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/login`, {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(loginObj)\n    })\n    .then(resp=>{\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user)\n          getFavorites(user)\n        })\n      } else {\n        resp.json().then(data => console.log(data))\n      }\n    })}\n  \n  const addWordToFavorites = (wordObj, userObj) => {\n    const userFavObj ={\n      user_id: userObj.id,\n      name: wordObj.name\n        }\n      fetch('https://dictionary-thesaurus-api.herokuapp.com/favorites', {\n        method: 'POST',\n        headers: {\n          'Content-Type':'application/json'\n        },\n        body: JSON.stringify(userFavObj)\n      })\n      .then(res => {\n        if (res.ok) {\n          res.json().then(data => {\n            getFavorites(loggedInUser)\n            console.log(data)\n          })\n        }\n      })\n      \n  }\n\n  // const grabFavorites = () => {\n  //   setFavList(value => value = [])\n  //   fetch(`http://localhost:3001/user/${loggedInUser.id}/favorites?_expand=words`)\n  //   .then(res=>res.json())\n  //   .then(data => anotherFunction(data))\n  // }\n      \n\n  // const anotherFunction = (data) => {\n  //     data.forEach(objs=>{ \n  //     fetch(`http://localhost:3001/words/${objs.wordId}`)\n  //     .then(res=>res.json())\n  //     .then(data=> {\n  //       const favObj = {...data, favoriteID: objs.id}\n  //       setFavList(value=>[...value, favObj])})\n  //     })\n  //   }\n      \n\n  function handleDeleteFavorite(favorite) {\n    console.log(favorite)\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/favorites/${favorite.id}`, {\n      method: 'DELETE'\n    })\n    .then(resp => {\n      if(resp.ok) {\n        getFavorites(loggedInUser)\n      } else {\n        resp.json().then(data => alert(data.errors))\n      }\n    })\n  }\n  \n  return (\n    <div>\n      <Switch>\n          <Route path=\"/newuser\">\n            <NewUserForm setLoggedInUser={setLoggedInUser} setFavoriteWords={setFavoriteWords} getFavorites={getFavorites}/>\n          </Route>\n          <Route path=\"/randomword\">\n            <WordOfTheDay />\n          </Route>\n          <Route path=\"/\">\n            <NavBar userLogin={userLogin} setLoggedInUser={setLoggedInUser} loggedInUser={loggedInUser} setIsLoggedIn={setIsLoggedIn} isLoggedIn={isLoggedIn} />\n            <Search getWordDefinition={getWordDefinition} getWordSynonym={getWordSynonym} setSearchWord={setSearchWord} setThesaurusSearchWord={setThesaurusSearchWord}/> \n            {searchWord? <WordCard handleDeleteFavorite={handleDeleteFavorite} favoriteWords={favoriteWords} isLiked={isLiked} addWordToFavorites={addWordToFavorites} isLiked={isLiked} setSearchWord={setSearchWord} searchWord={searchWord[0]} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/> : null}\n            {thesaurusSearchWord? <ThesaurusCard setThesaurusSearchWord={setThesaurusSearchWord} thesaurusSearchWord={thesaurusSearchWord[0]} /> : null}\n            {loggedInUser ? <FavoriteList favoriteWords={favoriteWords} handleDeleteFavorite={handleDeleteFavorite} favList={favList} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/> : null }\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}