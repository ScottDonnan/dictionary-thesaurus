{"ast":null,"code":"var _jsxFileName = \"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Search from './Components/Search';\nimport WordOfTheDay from './Components/WordOfTheDay';\nimport FavoriteList from './Components/FavoriteList';\nimport NavBar from './Components/NavBar';\nimport NewUserForm from './Components/NewUserForm';\nimport WordCard from './Components/WordCard';\nimport ThesaurusCard from './Components/ThesaurusCard';\nimport { Route, Switch } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [searchWord, setSearchWord] = useState('');\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [favList, setFavList] = useState([]);\n  const [thesaurusSearchWord, setThesaurusSearchWord] = useState(\"\");\n  const [isLiked, setIsLiked] = useState(true);\n  const [favoriteWords, setFavoriteWords] = useState([]);\n  useEffect(() => {\n    if (loggedInUser) {\n      getFavorites(loggedInUser);\n    } else {\n      setFavoriteWords([]);\n    }\n  }, [loggedInUser]);\n\n  function getFavorites(user) {\n    fetch(`users/favorite_words/${user.id}`).then(resp => resp.json()).then(words => setFavoriteWords(words));\n  }\n\n  function getWordDefinition(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${searchValue}?key=818a2b96-1647-4667-8769-8f3de5ad1509`).then(r => {\n      if (r.ok) {\n        r.json().then(data => {\n          if (data[0].meta) {\n            setSearchWord(data);\n          } else {\n            alert(\"word not found\");\n          }\n        });\n      }\n    });\n  }\n\n  function getWordSynonym(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/thesaurus/json/${searchValue}?key=bf67571a-955e-4874-aa11-d4d40d976166`).then(r => r.json()).then(data => setThesaurusSearchWord(data));\n  }\n\n  function userLogin(e, creds) {\n    e.preventDefault();\n    fetch(\"users/1\").then(resp => {\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user);\n          setIsLoggedIn(true);\n        });\n      } else {\n        resp.json().then(data => console.log(data));\n      }\n    });\n  }\n\n  const addWordToFavorites = (wordObj, userObj) => {\n    const userFavObj = {\n      user_id: userObj.id,\n      name: wordObj.name\n    };\n    fetch('favorites', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userFavObj)\n    }).then(res => {\n      if (res.ok) {\n        res.json().then(data => {\n          getFavorites(loggedInUser);\n          console.log(data);\n        });\n      }\n    });\n  }; // const grabFavorites = () => {\n  //   setFavList(value => value = [])\n  //   fetch(`http://localhost:3001/user/${loggedInUser.id}/favorites?_expand=words`)\n  //   .then(res=>res.json())\n  //   .then(data => anotherFunction(data))\n  // }\n\n\n  const anotherFunction = data => {\n    data.forEach(objs => {\n      fetch(`http://localhost:3001/words/${objs.wordId}`).then(res => res.json()).then(data => {\n        const favObj = { ...data,\n          favoriteID: objs.id\n        };\n        setFavList(value => [...value, favObj]);\n      });\n    });\n  };\n\n  function handleDeleteFavorite(word) {\n    fetch(`favorites/${word.id}`, {\n      method: 'DELETE'\n    }).then(resp => {\n      if (resp.ok) {\n        resp.json();\n      } else {\n        resp.json().then(data => alert(data.errors));\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/newuser\",\n        children: /*#__PURE__*/_jsxDEV(NewUserForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/randomword\",\n        children: /*#__PURE__*/_jsxDEV(WordOfTheDay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          userLogin: userLogin,\n          setLoggedInUser: setLoggedInUser,\n          loggedInUser: loggedInUser,\n          setIsLoggedIn: setIsLoggedIn,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Search, {\n          getWordDefinition: getWordDefinition,\n          getWordSynonym: getWordSynonym,\n          setSearchWord: setSearchWord,\n          setThesaurusSearchWord: setThesaurusSearchWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), searchWord ? /*#__PURE__*/_jsxDEV(WordCard, {\n          favoriteWords: favoriteWords,\n          isLiked: isLiked,\n          addWordToFavorites: addWordToFavorites,\n          isLiked: isLiked,\n          searchWord: searchWord[0],\n          isLoggedIn: isLoggedIn,\n          loggedInUser: loggedInUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 26\n        }, this) : null, thesaurusSearchWord ? /*#__PURE__*/_jsxDEV(ThesaurusCard, {\n          thesaurusSearchWord: thesaurusSearchWord[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 35\n        }, this) : null, /*#__PURE__*/_jsxDEV(FavoriteList, {\n          favoriteWords: favoriteWords,\n          handleDeleteFavorite: handleDeleteFavorite,\n          favList: favList,\n          isLoggedIn: isLoggedIn,\n          loggedInUser: loggedInUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"dAGzH+BO5XYyg6FxV3jOGAMBxVo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/scottdonnan/Development/code/flatiron-projects/phase-2/phase-2-project-dictionary/dictionary-phase-2/src/App.js"],"names":["React","useState","useEffect","Search","WordOfTheDay","FavoriteList","NavBar","NewUserForm","WordCard","ThesaurusCard","Route","Switch","App","searchWord","setSearchWord","loggedInUser","setLoggedInUser","isLoggedIn","setIsLoggedIn","favList","setFavList","thesaurusSearchWord","setThesaurusSearchWord","isLiked","setIsLiked","favoriteWords","setFavoriteWords","getFavorites","user","fetch","id","then","resp","json","words","getWordDefinition","searchValue","r","ok","data","meta","alert","getWordSynonym","userLogin","e","creds","preventDefault","console","log","addWordToFavorites","wordObj","userObj","userFavObj","user_id","name","method","headers","body","JSON","stringify","res","anotherFunction","forEach","objs","wordId","favObj","favoriteID","value","handleDeleteFavorite","word","errors"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;;;AAGA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACoB,mBAAD,EAAsBC,sBAAtB,IAAgDrB,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwBvB,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACwB,aAAD,EAAgBC,gBAAhB,IAAoCzB,QAAQ,CAAC,EAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAGa,YAAH,EAAgB;AACdY,MAAAA,YAAY,CAACZ,YAAD,CAAZ;AACD,KAFD,MAEO;AACLW,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACD;AACF,GANQ,EAMP,CAACX,YAAD,CANO,CAAT;;AAQA,WAASY,YAAT,CAAsBC,IAAtB,EAA4B;AAC1BC,IAAAA,KAAK,CAAE,wBAAuBD,IAAI,CAACE,EAAG,EAAjC,CAAL,CACKC,IADL,CACUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EADlB,EAEKF,IAFL,CAEUG,KAAK,IAAIR,gBAAgB,CAACQ,KAAD,CAFnC;AAGD;;AAED,WAASC,iBAAT,CAA2BC,WAA3B,EAAwC;AACtCP,IAAAA,KAAK,CAAE,+DAA8DO,WAAY,2CAA5E,CAAL,CACCL,IADD,CACMM,CAAC,IAAI;AACH,UAAIA,CAAC,CAACC,EAAN,EAAU;AACRD,QAAAA,CAAC,CAACJ,IAAF,GAASF,IAAT,CAAcQ,IAAI,IAAI;AAClB,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQC,IAAZ,EAAkB;AAChB1B,YAAAA,aAAa,CAACyB,IAAD,CAAb;AACD,WAFD,MAEO;AACLE,YAAAA,KAAK,CAAC,gBAAD,CAAL;AACD;AACJ,SAND;AAOD;AACR,KAXD;AAWG;;AAEL,WAASC,cAAT,CAAwBN,WAAxB,EAAqC;AACnCP,IAAAA,KAAK,CAAE,8DAA6DO,WAAY,2CAA3E,CAAL,CACCL,IADD,CACMM,CAAC,IAAIA,CAAC,CAACJ,IAAF,EADX,EAECF,IAFD,CAEMQ,IAAI,IAAIjB,sBAAsB,CAACiB,IAAD,CAFpC;AAGD;;AAED,WAASI,SAAT,CAAmBC,CAAnB,EAAsBC,KAAtB,EAA6B;AAC3BD,IAAAA,CAAC,CAACE,cAAF;AACAjB,IAAAA,KAAK,CAAC,SAAD,CAAL,CACCE,IADD,CACMC,IAAI,IAAE;AACV,UAAIA,IAAI,CAACM,EAAT,EAAa;AACXN,QAAAA,IAAI,CAACC,IAAL,GAAYF,IAAZ,CAAiBH,IAAI,IAAI;AACvBZ,UAAAA,eAAe,CAACY,IAAD,CAAf;AACAV,UAAAA,aAAa,CAAC,IAAD,CAAb;AACD,SAHD;AAID,OALD,MAKO;AACLc,QAAAA,IAAI,CAACC,IAAL,GAAYF,IAAZ,CAAiBQ,IAAI,IAAIQ,OAAO,CAACC,GAAR,CAAYT,IAAZ,CAAzB;AACD;AACF,KAVD;AAUG;;AAEL,QAAMU,kBAAkB,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC/C,UAAMC,UAAU,GAAE;AAChBC,MAAAA,OAAO,EAAEF,OAAO,CAACrB,EADD;AAEhBwB,MAAAA,IAAI,EAAEJ,OAAO,CAACI;AAFE,KAAlB;AAIEzB,IAAAA,KAAK,CAAC,WAAD,EAAc;AACjB0B,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,OAAO,EAAE;AACP,wBAAe;AADR,OAFQ;AAKjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,UAAf;AALW,KAAd,CAAL,CAOCrB,IAPD,CAOM6B,GAAG,IAAI;AACX,UAAIA,GAAG,CAACtB,EAAR,EAAY;AACVsB,QAAAA,GAAG,CAAC3B,IAAJ,GAAWF,IAAX,CAAgBQ,IAAI,IAAI;AACtBZ,UAAAA,YAAY,CAACZ,YAAD,CAAZ;AACAgC,UAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AACD,SAHD;AAID;AACF,KAdD;AAgBH,GArBD,CAzDa,CAgFb;AACA;AACA;AACA;AACA;AACA;;;AAGA,QAAMsB,eAAe,GAAItB,IAAD,IAAU;AAC9BA,IAAAA,IAAI,CAACuB,OAAL,CAAaC,IAAI,IAAE;AACnBlC,MAAAA,KAAK,CAAE,+BAA8BkC,IAAI,CAACC,MAAO,EAA5C,CAAL,CACCjC,IADD,CACM6B,GAAG,IAAEA,GAAG,CAAC3B,IAAJ,EADX,EAECF,IAFD,CAEMQ,IAAI,IAAG;AACX,cAAM0B,MAAM,GAAG,EAAC,GAAG1B,IAAJ;AAAU2B,UAAAA,UAAU,EAAEH,IAAI,CAACjC;AAA3B,SAAf;AACAV,QAAAA,UAAU,CAAC+C,KAAK,IAAE,CAAC,GAAGA,KAAJ,EAAWF,MAAX,CAAR,CAAV;AAAsC,OAJxC;AAKC,KAND;AAOD,GARH;;AAWA,WAASG,oBAAT,CAA8BC,IAA9B,EAAoC;AAClCxC,IAAAA,KAAK,CAAE,aAAYwC,IAAI,CAACvC,EAAG,EAAtB,EAAyB;AAC5ByB,MAAAA,MAAM,EAAE;AADoB,KAAzB,CAAL,CAGCxB,IAHD,CAGMC,IAAI,IAAI;AACZ,UAAGA,IAAI,CAACM,EAAR,EAAY;AACVN,QAAAA,IAAI,CAACC,IAAL;AACD,OAFD,MAEO;AACLD,QAAAA,IAAI,CAACC,IAAL,GAAYF,IAAZ,CAAiBQ,IAAI,IAAIE,KAAK,CAACF,IAAI,CAAC+B,MAAN,CAA9B;AACD;AACF,KATD;AAUD;;AAED,sBACE;AAAA,2BACE,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAA,+BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADJ,eAII,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAAA,+BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJJ,eAOI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,SAAS,EAAE3B,SAAnB;AAA8B,UAAA,eAAe,EAAE3B,eAA/C;AAAgE,UAAA,YAAY,EAAED,YAA9E;AAA4F,UAAA,aAAa,EAAEG,aAA3G;AAA0H,UAAA,UAAU,EAAED;AAAtI;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,iBAAiB,EAAEkB,iBAA3B;AAA8C,UAAA,cAAc,EAAEO,cAA9D;AAA8E,UAAA,aAAa,EAAE5B,aAA7F;AAA4G,UAAA,sBAAsB,EAAEQ;AAApI;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGGT,UAAU,gBAAE,QAAC,QAAD;AAAU,UAAA,aAAa,EAAEY,aAAzB;AAAwC,UAAA,OAAO,EAAEF,OAAjD;AAA0D,UAAA,kBAAkB,EAAE0B,kBAA9E;AAAkG,UAAA,OAAO,EAAE1B,OAA3G;AAAoH,UAAA,UAAU,EAAEV,UAAU,CAAC,CAAD,CAA1I;AAA+I,UAAA,UAAU,EAAEI,UAA3J;AAAuK,UAAA,YAAY,EAAEF;AAArL;AAAA;AAAA;AAAA;AAAA,gBAAF,GAAyM,IAHtN,EAIGM,mBAAmB,gBAAE,QAAC,aAAD;AAAe,UAAA,mBAAmB,EAAEA,mBAAmB,CAAC,CAAD;AAAvD;AAAA;AAAA;AAAA;AAAA,gBAAF,GAAmE,IAJzF,eAKE,QAAC,YAAD;AAAc,UAAA,aAAa,EAAEI,aAA7B;AAA4C,UAAA,oBAAoB,EAAE2C,oBAAlE;AAAwF,UAAA,OAAO,EAAEjD,OAAjG;AAA0G,UAAA,UAAU,EAAEF,UAAtH;AAAkI,UAAA,YAAY,EAAEF;AAAhJ;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GAnIQH,G;;KAAAA,G;AAqIT,eAAeA,GAAf","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Search from './Components/Search';\nimport WordOfTheDay from './Components/WordOfTheDay';\nimport FavoriteList from './Components/FavoriteList';\nimport NavBar from './Components/NavBar';\nimport NewUserForm from './Components/NewUserForm';\nimport WordCard from './Components/WordCard';\nimport ThesaurusCard from './Components/ThesaurusCard';\nimport { Route, Switch } from 'react-router-dom'\n\n\nfunction App() {\n  const [searchWord, setSearchWord] = useState('')\n  const [loggedInUser, setLoggedInUser] = useState(null)\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [favList, setFavList] = useState([])\n  const [thesaurusSearchWord, setThesaurusSearchWord] = useState(\"\")\n  const [isLiked, setIsLiked] = useState(true)\n  const [favoriteWords, setFavoriteWords] = useState([])\n  \n  useEffect(()=>{\n    if(loggedInUser){ \n      getFavorites(loggedInUser)\n    } else {\n      setFavoriteWords([])\n    }\n  },[loggedInUser]) \n\n  function getFavorites(user) {\n    fetch(`users/favorite_words/${user.id}`)\n        .then(resp => resp.json())\n        .then(words => setFavoriteWords(words))\n  }\n  \n  function getWordDefinition(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${searchValue}?key=818a2b96-1647-4667-8769-8f3de5ad1509`)\n    .then(r => {\n            if (r.ok) {\n              r.json().then(data => {\n                  if (data[0].meta) {\n                    setSearchWord(data)\n                  } else {\n                    alert(\"word not found\")\n                  }\n              })\n            }\n    })}\n\n  function getWordSynonym(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/thesaurus/json/${searchValue}?key=bf67571a-955e-4874-aa11-d4d40d976166`)\n    .then(r => r.json())\n    .then(data => setThesaurusSearchWord(data))\n  }\n\n  function userLogin(e, creds) {\n    e.preventDefault()\n    fetch(\"users/1\")\n    .then(resp=>{\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user)\n          setIsLoggedIn(true)\n        })\n      } else {\n        resp.json().then(data => console.log(data))\n      }\n    })}\n  \n  const addWordToFavorites = (wordObj, userObj) => {\n    const userFavObj ={\n      user_id: userObj.id,\n      name: wordObj.name\n        }\n      fetch('favorites', {\n        method: 'POST',\n        headers: {\n          'Content-Type':'application/json'\n        },\n        body: JSON.stringify(userFavObj)\n      })\n      .then(res => {\n        if (res.ok) {\n          res.json().then(data => {\n            getFavorites(loggedInUser)\n            console.log(data)\n          })\n        }\n      })\n      \n  }\n\n  // const grabFavorites = () => {\n  //   setFavList(value => value = [])\n  //   fetch(`http://localhost:3001/user/${loggedInUser.id}/favorites?_expand=words`)\n  //   .then(res=>res.json())\n  //   .then(data => anotherFunction(data))\n  // }\n      \n\n  const anotherFunction = (data) => {\n      data.forEach(objs=>{ \n      fetch(`http://localhost:3001/words/${objs.wordId}`)\n      .then(res=>res.json())\n      .then(data=> {\n        const favObj = {...data, favoriteID: objs.id}\n        setFavList(value=>[...value, favObj])})\n      })\n    }\n      \n\n  function handleDeleteFavorite(word) {\n    fetch(`favorites/${word.id}`, {\n      method: 'DELETE'\n    })\n    .then(resp => {\n      if(resp.ok) {\n        resp.json()\n      } else {\n        resp.json().then(data => alert(data.errors))\n      }\n    })\n  }\n  \n  return (\n    <div>\n      <Switch>\n          <Route path=\"/newuser\">\n            <NewUserForm />\n          </Route>\n          <Route path=\"/randomword\">\n            <WordOfTheDay />\n          </Route>\n          <Route path=\"/\">\n            <NavBar userLogin={userLogin} setLoggedInUser={setLoggedInUser} loggedInUser={loggedInUser} setIsLoggedIn={setIsLoggedIn} isLoggedIn={isLoggedIn} />\n            <Search getWordDefinition={getWordDefinition} getWordSynonym={getWordSynonym} setSearchWord={setSearchWord} setThesaurusSearchWord={setThesaurusSearchWord}/> \n            {searchWord? <WordCard favoriteWords={favoriteWords} isLiked={isLiked} addWordToFavorites={addWordToFavorites} isLiked={isLiked} searchWord={searchWord[0]} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/> : null}\n            {thesaurusSearchWord? <ThesaurusCard thesaurusSearchWord={thesaurusSearchWord[0]} /> : null}\n            <FavoriteList favoriteWords={favoriteWords} handleDeleteFavorite={handleDeleteFavorite} favList={favList} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/>\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}