{"ast":null,"code":"var _jsxFileName = \"/Users/scottdonnan/Development/code/flatiron-projects/phase-2/dictionary-thesaurus/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Search from './Components/Search';\nimport WordOfTheDay from './Components/WordOfTheDay';\nimport FavoriteList from './Components/FavoriteList';\nimport NavBar from './Components/NavBar';\nimport NewUserForm from './Components/NewUserForm';\nimport WordCard from './Components/WordCard';\nimport ThesaurusCard from './Components/ThesaurusCard';\nimport { Route, Switch } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [searchWord, setSearchWord] = useState('');\n  const [loggedInUser, setLoggedInUser] = useState(null);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [favList, setFavList] = useState([]);\n  const [thesaurusSearchWord, setThesaurusSearchWord] = useState(\"\");\n  const [isLiked, setIsLiked] = useState(true);\n  const [favoriteWords, setFavoriteWords] = useState([]);\n  const [mostSearched, setMostSearched] = useState([]);\n  useEffect(() => {\n    fetch('https://dictionary-thesaurus-api.herokuapp.com/me').then(resp => {\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user);\n\n          if (user) {\n            getFavorites(user);\n          } else {\n            setFavoriteWords([]);\n          }\n        });\n      } else {\n        console.log(resp.json());\n      }\n    });\n  }, []);\n  useEffect(() => {\n    fetch('/word_search_list').then(resp => resp.json().then(data => setMostSearched(data)));\n  }, []);\n\n  function getFavorites(user) {\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/users/favorite_words/${user.id}`).then(resp => resp.json()).then(words => setFavoriteWords(words));\n  }\n\n  function getWordDefinition(searchValue) {\n    function updateWord(value) {\n      const wordUpdate = {\n        name: value\n      };\n      fetch('/words', {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(wordUpdate)\n      });\n    }\n\n    fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${searchValue}?key=818a2b96-1647-4667-8769-8f3de5ad1509`).then(r => {\n      if (r.ok) {\n        r.json().then(data => {\n          if (data[0].meta) {\n            setSearchWord(data);\n            updateWord(searchValue);\n          } else {\n            alert(\"word not found\");\n          }\n        });\n      }\n    });\n  }\n\n  function getWordSynonym(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/thesaurus/json/${searchValue}?key=bf67571a-955e-4874-aa11-d4d40d976166`).then(r => r.json()).then(data => setThesaurusSearchWord(data));\n  }\n\n  function userLogin(username, password, e) {\n    e.preventDefault();\n    const loginObj = {\n      username: username,\n      password: password\n    };\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(loginObj)\n    }).then(resp => {\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user);\n          getFavorites(user);\n        });\n      } else {\n        alert('status :' + resp.status + \" \" + resp.statusText); // resp.json().then(data => console.log(data))\n      }\n    });\n  }\n\n  const addWordToFavorites = (wordObj, userObj) => {\n    const userFavObj = {\n      user_id: userObj.id,\n      name: wordObj.name\n    };\n    fetch('https://dictionary-thesaurus-api.herokuapp.com/favorites', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userFavObj)\n    }).then(res => {\n      if (res.ok) {\n        res.json().then(data => {\n          getFavorites(loggedInUser);\n          console.log(data);\n        });\n      }\n    });\n  }; // const grabFavorites = () => {\n  //   setFavList(value => value = [])\n  //   fetch(`http://localhost:3001/user/${loggedInUser.id}/favorites?_expand=words`)\n  //   .then(res=>res.json())\n  //   .then(data => anotherFunction(data))\n  // }\n  // const anotherFunction = (data) => {\n  //     data.forEach(objs=>{ \n  //     fetch(`http://localhost:3001/words/${objs.wordId}`)\n  //     .then(res=>res.json())\n  //     .then(data=> {\n  //       const favObj = {...data, favoriteID: objs.id}\n  //       setFavList(value=>[...value, favObj])})\n  //     })\n  //   }\n\n\n  function handleDeleteFavorite(favorite) {\n    console.log(favorite);\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/favorites/${favorite.id}`, {\n      method: 'DELETE'\n    }).then(resp => {\n      if (resp.ok) {\n        getFavorites(loggedInUser);\n      } else {\n        resp.json().then(data => alert(data.errors));\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/newuser\",\n        children: /*#__PURE__*/_jsxDEV(NewUserForm, {\n          setLoggedInUser: setLoggedInUser,\n          setFavoriteWords: setFavoriteWords,\n          getFavorites: getFavorites\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/randomword\",\n        children: /*#__PURE__*/_jsxDEV(WordOfTheDay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          userLogin: userLogin,\n          setLoggedInUser: setLoggedInUser,\n          loggedInUser: loggedInUser,\n          setIsLoggedIn: setIsLoggedIn,\n          isLoggedIn: isLoggedIn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Search, {\n          getWordDefinition: getWordDefinition,\n          getWordSynonym: getWordSynonym,\n          setSearchWord: setSearchWord,\n          setThesaurusSearchWord: setThesaurusSearchWord\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Most Favorited Words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: mostSearched.map((fav, indx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [fav.name, \" : \", fav.times_searched]\n            }, indx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 50\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), searchWord ? /*#__PURE__*/_jsxDEV(WordCard, {\n          handleDeleteFavorite: handleDeleteFavorite,\n          favoriteWords: favoriteWords,\n          isLiked: isLiked,\n          addWordToFavorites: addWordToFavorites,\n          isLiked: isLiked,\n          setSearchWord: setSearchWord,\n          searchWord: searchWord[0],\n          isLoggedIn: isLoggedIn,\n          loggedInUser: loggedInUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 26\n        }, this) : null, thesaurusSearchWord ? /*#__PURE__*/_jsxDEV(ThesaurusCard, {\n          setThesaurusSearchWord: setThesaurusSearchWord,\n          thesaurusSearchWord: thesaurusSearchWord[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 35\n        }, this) : null, loggedInUser ? /*#__PURE__*/_jsxDEV(FavoriteList, {\n          favoriteWords: favoriteWords,\n          handleDeleteFavorite: handleDeleteFavorite,\n          favList: favList,\n          isLoggedIn: isLoggedIn,\n          loggedInUser: loggedInUser\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CJYxyUMcYYskvVG2n/q+8E7008E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/scottdonnan/Development/code/flatiron-projects/phase-2/dictionary-thesaurus/src/App.js"],"names":["React","useState","useEffect","Search","WordOfTheDay","FavoriteList","NavBar","NewUserForm","WordCard","ThesaurusCard","Route","Switch","App","searchWord","setSearchWord","loggedInUser","setLoggedInUser","isLoggedIn","setIsLoggedIn","favList","setFavList","thesaurusSearchWord","setThesaurusSearchWord","isLiked","setIsLiked","favoriteWords","setFavoriteWords","mostSearched","setMostSearched","fetch","then","resp","ok","json","user","getFavorites","console","log","data","id","words","getWordDefinition","searchValue","updateWord","value","wordUpdate","name","method","headers","body","JSON","stringify","r","meta","alert","getWordSynonym","userLogin","username","password","e","preventDefault","loginObj","status","statusText","addWordToFavorites","wordObj","userObj","userFavObj","user_id","res","handleDeleteFavorite","favorite","errors","map","fav","indx","times_searched"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport Search from './Components/Search';\nimport WordOfTheDay from './Components/WordOfTheDay';\nimport FavoriteList from './Components/FavoriteList';\nimport NavBar from './Components/NavBar';\nimport NewUserForm from './Components/NewUserForm';\nimport WordCard from './Components/WordCard';\nimport ThesaurusCard from './Components/ThesaurusCard';\nimport { Route, Switch } from 'react-router-dom'\n\n\nfunction App() {\n  const [searchWord, setSearchWord] = useState('')\n  const [loggedInUser, setLoggedInUser] = useState(null)\n  const [isLoggedIn, setIsLoggedIn] = useState(false)\n  const [favList, setFavList] = useState([])\n  const [thesaurusSearchWord, setThesaurusSearchWord] = useState(\"\")\n  const [isLiked, setIsLiked] = useState(true)\n  const [favoriteWords, setFavoriteWords] = useState([])\n  const [mostSearched, setMostSearched] = useState([])\n  \n  useEffect(()=>{\n    fetch('https://dictionary-thesaurus-api.herokuapp.com/me').then(resp => {\n      if (resp.ok) {\n        resp.json()\n        .then(user => {\n          setLoggedInUser(user)\n          if(user) {\n            getFavorites(user)\n          } else {\n            setFavoriteWords([])\n          }\n        })\n      } else {\n        console.log(resp.json())\n      }\n    })\n  },[]) \n\n  useEffect(() => {\n    fetch('/word_search_list').then(resp => resp.json().then(data => setMostSearched(data)))\n  }, [])\n\n  function getFavorites(user) {\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/users/favorite_words/${user.id}`)\n        .then(resp => resp.json())\n        .then(words => setFavoriteWords(words))\n  }\n  \n  function getWordDefinition(searchValue) {\n    function updateWord(value) {\n      const wordUpdate = {\n        name: value\n      }\n      fetch('/words', {\n        method: \"POST\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify(wordUpdate)\n      })\n    }\n\n    fetch(`https://dictionaryapi.com/api/v3/references/collegiate/json/${searchValue}?key=818a2b96-1647-4667-8769-8f3de5ad1509`)\n    .then(r => {\n            if (r.ok) {\n              r.json().then(data => {\n                  if (data[0].meta) {\n                    setSearchWord(data)\n                    updateWord(searchValue)\n                  } else {\n                    alert(\"word not found\")\n                  }\n              })\n            }\n    })\n  }\n\n  function getWordSynonym(searchValue) {\n    fetch(`https://dictionaryapi.com/api/v3/references/thesaurus/json/${searchValue}?key=bf67571a-955e-4874-aa11-d4d40d976166`)\n    .then(r => r.json())\n    .then(data => setThesaurusSearchWord(data))\n  }\n\n  function userLogin(username, password, e) {\n    e.preventDefault()\n    const loginObj = {\n      username: username,\n      password: password\n    }\n\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/login`, {\n      method: \"POST\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify(loginObj)\n    })\n    .then(resp=>{\n      if (resp.ok) {\n        resp.json().then(user => {\n          setLoggedInUser(user)\n          getFavorites(user)\n        })\n      } else {\n        alert('status :'+ resp.status + \" \" + resp.statusText)\n        // resp.json().then(data => console.log(data))\n      }\n    })}\n  \n  const addWordToFavorites = (wordObj, userObj) => {\n    const userFavObj ={\n      user_id: userObj.id,\n      name: wordObj.name,\n        }\n      fetch('https://dictionary-thesaurus-api.herokuapp.com/favorites', {\n        method: 'POST',\n        headers: {\n          'Content-Type':'application/json'\n        },\n        body: JSON.stringify(userFavObj)\n      })\n      .then(res => {\n        if (res.ok) {\n          res.json().then(data => {\n            getFavorites(loggedInUser)\n            console.log(data)\n          })\n        }\n      })\n      \n  }\n\n  // const grabFavorites = () => {\n  //   setFavList(value => value = [])\n  //   fetch(`http://localhost:3001/user/${loggedInUser.id}/favorites?_expand=words`)\n  //   .then(res=>res.json())\n  //   .then(data => anotherFunction(data))\n  // }\n      \n\n  // const anotherFunction = (data) => {\n  //     data.forEach(objs=>{ \n  //     fetch(`http://localhost:3001/words/${objs.wordId}`)\n  //     .then(res=>res.json())\n  //     .then(data=> {\n  //       const favObj = {...data, favoriteID: objs.id}\n  //       setFavList(value=>[...value, favObj])})\n  //     })\n  //   }\n      \n\n  function handleDeleteFavorite(favorite) {\n    console.log(favorite)\n    fetch(`https://dictionary-thesaurus-api.herokuapp.com/favorites/${favorite.id}`, {\n      method: 'DELETE'\n    })\n    .then(resp => {\n      if(resp.ok) {\n        getFavorites(loggedInUser)\n      } else {\n        resp.json().then(data => alert(data.errors))\n      }\n    })\n  }\n  \n  return (\n    <div>\n      <Switch>\n          <Route path=\"/newuser\">\n            <NewUserForm setLoggedInUser={setLoggedInUser} setFavoriteWords={setFavoriteWords} getFavorites={getFavorites}/>\n          </Route>\n          <Route path=\"/randomword\">\n            <WordOfTheDay />\n          </Route>\n          <Route path=\"/\">\n            <NavBar userLogin={userLogin} setLoggedInUser={setLoggedInUser} loggedInUser={loggedInUser} setIsLoggedIn={setIsLoggedIn} isLoggedIn={isLoggedIn} />\n            <Search getWordDefinition={getWordDefinition} getWordSynonym={getWordSynonym} setSearchWord={setSearchWord} setThesaurusSearchWord={setThesaurusSearchWord}/> \n            <div>\n              <h3>Most Favorited Words</h3>\n              <ul>\n                {mostSearched.map((fav, indx) => <li key={indx}>{fav.name} : {fav.times_searched}</li>)}\n              </ul>\n            </div>\n            {searchWord? <WordCard handleDeleteFavorite={handleDeleteFavorite} favoriteWords={favoriteWords} isLiked={isLiked} addWordToFavorites={addWordToFavorites} isLiked={isLiked} setSearchWord={setSearchWord} searchWord={searchWord[0]} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/> : null}\n            {thesaurusSearchWord? <ThesaurusCard setThesaurusSearchWord={setThesaurusSearchWord} thesaurusSearchWord={thesaurusSearchWord[0]} /> : null}\n            {loggedInUser ? <FavoriteList favoriteWords={favoriteWords} handleDeleteFavorite={handleDeleteFavorite} favList={favList} isLoggedIn={isLoggedIn} loggedInUser={loggedInUser}/> : null }\n          </Route>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}